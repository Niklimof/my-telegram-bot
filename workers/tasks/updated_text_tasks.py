# workers/tasks/updated_text_tasks.py
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Celery –∑–∞–¥–∞—á–∏ —Å –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Claude

from celery import shared_task
from core.pipeline.updated_text_pipeline import UpdatedTextPipeline
from database.crud import update_project, add_log, get_project, get_plan
from config.secure_settings import settings
from interfaces.telegram_bot.improved_bot import notify_progress
import asyncio
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

@shared_task(bind=True, max_retries=3)
def process_text_pipeline(self, project_id: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Claude"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        project = get_project(project_id)
        if not project:
            raise ValueError(f"–ü—Ä–æ–µ–∫—Ç {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        plan = get_plan(project.plan_id)
        if not plan:
            raise ValueError(f"–ü–ª–∞–Ω {project.plan_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        update_project(project_id, {
            "status": "processing",
            "phase": 1,
            "started_at": datetime.now()
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not settings.is_fully_configured():
            raise ValueError("–ù–µ –≤—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        config = {
            "whisper_model": project.settings.whisper_model,
            "claude_api_key": settings.CLAUDE_API_KEY,
            "speechkit_api_key": settings.YANDEX_SPEECHKIT_API_KEY,
            "speechkit_folder_id": settings.YANDEX_SPEECHKIT_FOLDER_ID,
            "yandex_disk_token": settings.YANDEX_DISK_TOKEN
        }
        
        pipeline = UpdatedTextPipeline(config)
        
        # –ö–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        async def update_progress(message: str):
            add_log(project_id, "info", "pipeline", message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            if project.telegram_chat_id:
                await notify_progress(project.telegram_chat_id, project_id, message)
        
        callbacks = {
            "download_start": update_progress,
            "download_complete": update_progress,
            "transcribe_start": update_progress,
            "transcribe_complete": update_progress,
            "process_start": update_progress,
            "claude_plan_start": update_progress,
            "claude_story_start": update_progress,
            "process_complete": update_progress,
            "speech_start": update_progress,
            "speech_complete": update_progress,
            "upload_start": update_progress,
            "upload_complete": update_progress,
            "pipeline_complete": update_progress,
            "pipeline_error": update_progress
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º pipeline
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        results = loop.run_until_complete(
            pipeline.process(
                project_id=project_id,
                youtube_url=project.youtube_url,
                plan=plan.__dict__,
                callbacks=callbacks
            )
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        update_data = {
            "status": "completed",
            "completed_at": datetime.now(),
            "transcription_text": results["steps"]["transcription"]["text"],
            "transcription_word_count": results["steps"]["transcription"]["word_count"],
            "processed_text": results["steps"]["text_processing"]["story"],
            "processed_word_count": results["steps"]["text_processing"]["word_count"],
            "processing_prompt": results["steps"]["text_processing"]["plan"][:500] + "...",
            "speech_chunks": results["steps"]["speech_generation"]["audio_files"],
            "speech_duration": results["steps"]["speech_generation"]["total_duration"],
            "speech_voice": results["steps"]["speech_generation"]["voice"],
            "yandex_folder_url": results["yandex_folder_url"]
        }
        
        update_project(project_id, update_data)
        
        add_log(project_id, "info", "pipeline", 
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {results['processing_time']/60:.1f} –º–∏–Ω—É—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if project.telegram_chat_id:
            loop.run_until_complete(
                notify_progress(
                    project.telegram_chat_id, 
                    project_id,
                    f"üéâ –í–∞—à —Ä–∞—Å—Å–∫–∞–∑ –≥–æ—Ç–æ–≤!\n"
                    f"üìÅ –°–∫–∞—á–∞—Ç—å: {results['yandex_folder_url']}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~{results['steps']['speech_generation']['total_duration']/60:.1f} –º–∏–Ω—É—Ç\n"
                    f"üìù –°–ª–æ–≤: {results['steps']['text_processing']['word_count']}"
                )
            )
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pipeline –ø—Ä–æ–µ–∫—Ç–∞ {project_id}: {str(e)}")
        
        update_project(project_id, {
            "status": "failed",
            "error_message": str(e),
            "completed_at": datetime.now()
        })
        
        add_log(project_id, "error", "pipeline", f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        try:
            project = get_project(project_id)
            if project and project.telegram_chat_id:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(
                    notify_progress(
                        project.telegram_chat_id,
                        project_id,
                        f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
                        f"–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."
                    )
                )
        except:
            pass
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        raise self.retry(exc=e, countdown=300)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç

@shared_task
def cleanup_old_files(days_to_keep: int = 7):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    import os
    import shutil
    from datetime import datetime, timedelta
    
    cutoff_date = datetime.now() - timedelta(days=days_to_keep)
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É downloads
    downloads_dir = settings.DOWNLOAD_DIR
    if os.path.exists(downloads_dir):
        for folder in os.listdir(downloads_dir):
            folder_path = os.path.join(downloads_dir, folder)
            if os.path.isdir(folder_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                folder_time = datetime.fromtimestamp(os.path.getctime(folder_path))
                if folder_time < cutoff_date:
                    logger.info(f"–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É: {folder_path}")
                    shutil.rmtree(folder_path)
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É outputs
    outputs_dir = settings.OUTPUT_DIR
    if os.path.exists(outputs_dir):
        for folder in os.listdir(outputs_dir):
            folder_path = os.path.join(outputs_dir, folder)
            if os.path.isdir(folder_path):
                folder_time = datetime.fromtimestamp(os.path.getctime(folder_path))
                if folder_time < cutoff_date:
                    logger.info(f"–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É: {folder_path}")
                    shutil.rmtree(folder_path)
    
    logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@shared_task
def check_project_status(project_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    project = get_project(project_id)
    
    if not project:
        logger.error(f"–ü—Ä–æ–µ–∫—Ç {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if project.status == "processing":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–∏—Å –ª–∏ –ø—Ä–æ–µ–∫—Ç
        if project.started_at:
            processing_time = (datetime.now() - project.started_at).total_seconds() / 60
            
            if processing_time > 120:  # –ë–æ–ª–µ–µ 2 —á–∞—Å–æ–≤
                logger.warning(f"–ü—Ä–æ–µ–∫—Ç {project_id} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if project.telegram_chat_id:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(
                        notify_progress(
                            project.telegram_chat_id,
                            project_id,
                            "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ.\n"
                            "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å..."
                        )
                    )
    
    return {
        "project_id": project_id,
        "status": project.status,
        "processing_time": (datetime.now() - project.started_at).total_seconds() / 60 if project.started_at else 0
    }