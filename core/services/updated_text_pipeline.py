# core/pipeline/updated_text_pipeline.py
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π pipeline —Å –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Claude

import asyncio
from typing import Dict, Any, Optional
import logging
from datetime import datetime

from core.services.youtube_downloader import YouTubeDownloader
from core.services.transcriber import Transcriber
from core.services.dual_claude_processor import DualClaudeProcessor
from core.services.speech_generator import SpeechGenerator
from core.services.storage_manager import YandexDiskManager

logger = logging.getLogger(__name__)

class UpdatedTextPipeline:
    """Pipeline –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å–∫–∞–∑–æ–≤ —Å –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Claude"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.youtube = YouTubeDownloader()
        self.transcriber = Transcriber(model_size=config.get("whisper_model", "large"))
        self.text_processor = DualClaudeProcessor(api_key=config["claude_api_key"])
        self.speech_generator = SpeechGenerator(
            api_key=config["speechkit_api_key"],
            folder_id=config["speechkit_folder_id"]
        )
        self.storage = YandexDiskManager(token=config["yandex_disk_token"])
        
    async def process(self, 
                     project_id: str,
                     youtube_url: str,
                     plan: Dict[str, Any],
                     callbacks: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ
        """
        start_time = datetime.now()
        results = {
            "project_id": project_id,
            "status": "processing",
            "steps": {}
        }
        
        try:
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
            await self._notify(callbacks, "download_start", "üé¨ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")
            
            video_info = await self.youtube.download(youtube_url, f"downloads/{project_id}")
            results["steps"]["download"] = {
                "status": "completed",
                "video_path": video_info["path"],
                "duration": video_info["duration"],
                "title": video_info["title"]
            }
            
            await self._notify(callbacks, "download_complete", 
                             f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {video_info['title']}")
            
            # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            await self._notify(callbacks, "transcribe_start", "üé§ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
            
            audio_path = await self.youtube.extract_audio(video_info["path"])
            transcription = await self.transcriber.transcribe(audio_path)
            
            results["steps"]["transcription"] = {
                "status": "completed",
                "text": transcription["text"],
                "word_count": len(transcription["text"].split()),
                "language": transcription.get("language", "ru")
            }
            
            await self._notify(callbacks, "transcribe_complete", 
                             f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(transcription['text'].split())} —Å–ª–æ–≤")
            
            # 3. –î–≤–æ–π–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Claude
            await self._notify(callbacks, "process_start", 
                             "ü§ñ –ó–∞–ø—É—Å–∫–∞—é –¥–≤–æ–π–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Claude AI...")
            
            # –ù–∞—Ö–æ–¥–∏–º —à–∞–≥–∏ –¥–ª—è –¥–≤—É—Ö Claude
            plan_step = next(
                (step for step in plan["text_steps"] if step["type"] == "create_story_plan"),
                None
            )
            
            if not plan_step:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                plan_step = next(
                    (step for step in plan["text_steps"] if step["type"] == "process_with_claude"),
                    None
                )
            
            if not plan_step:
                raise ValueError("–®–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Claude –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–∞–Ω–µ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–æ–π–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            await self._notify(callbacks, "claude_plan_start", 
                             "üìù Claude #1: –°–æ–∑–¥–∞—é –ø–ª–∞–Ω —Ä–∞—Å—Å–∫–∞–∑–∞...")
            
            processing_result = await self.text_processor.process_with_dual_claude(
                transcription["text"],
                plan_step["params"]["prompt"],
                plan_step["params"].get("model", "claude-3-sonnet-20240229")
            )
            
            await self._notify(callbacks, "claude_story_start", 
                             "‚úçÔ∏è Claude #2: –ü–∏—à—É —Ä–∞—Å—Å–∫–∞–∑ –ø–æ –ø–ª–∞–Ω—É...")
            
            results["steps"]["text_processing"] = {
                "status": "completed",
                "plan": processing_result["plan"],
                "story": processing_result["story"],
                "word_count": processing_result["word_count"],
                "processing_time": processing_result["processing_time"]
            }
            
            await self._notify(callbacks, "process_complete", 
                             f"‚úÖ –†–∞—Å—Å–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: {processing_result['word_count']} —Å–ª–æ–≤")
            
            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏
            await self._notify(callbacks, "speech_start", 
                             "üîä –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–∑–≤—É—á–∫–∏ —á–µ—Ä–µ–∑ SpeechKit...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∑–≤—É—á–∫–∏
            speech_step = next(
                (step for step in plan["text_steps"] if step["type"] == "generate_speech"),
                None
            )
            
            if not speech_step:
                raise ValueError("–®–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–∞–Ω–µ")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞
            speech_result = await self.speech_generator.generate_for_20k_words(
                processing_result["story"],
                f"outputs/{project_id}/audio",
                voice=speech_step["params"].get("voice", "alena"),
                emotion=speech_step["params"].get("emotion", "neutral"),
                speed=speech_step["params"].get("speed", 1.0)
            )
            
            results["steps"]["speech_generation"] = {
                "status": "completed",
                "audio_files": speech_result["audio_files"],
                "chunks_count": speech_result["chunks_count"],
                "total_duration": speech_result["total_duration"],
                "voice": speech_result["voice"]
            }
            
            await self._notify(callbacks, "speech_complete", 
                             f"‚úÖ –û–∑–≤—É—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {speech_result['chunks_count']} —Ñ–∞–π–ª–æ–≤, "
                             f"~{speech_result['total_duration']/60:.1f} –º–∏–Ω—É—Ç")
            
            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
            await self._notify(callbacks, "upload_start", 
                             "‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω
            plan_file = f"outputs/{project_id}/story_plan.txt"
            with open(plan_file, 'w', encoding='utf-8') as f:
                f.write("=== –ü–õ–ê–ù –†–ê–°–°–ö–ê–ó–ê ===\n\n")
                f.write(processing_result["plan"])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å–∫–∞–∑
            story_file = f"outputs/{project_id}/final_story.txt"
            with open(story_file, 'w', encoding='utf-8') as f:
                f.write(processing_result["story"])
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_file = f"outputs/{project_id}/metadata.json"
            import json
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump({
                    "project_id": project_id,
                    "youtube_url": youtube_url,
                    "original_title": video_info["title"],
                    "original_duration": video_info["duration"],
                    "transcription_words": len(transcription["text"].split()),
                    "story_words": processing_result["word_count"],
                    "audio_duration": speech_result["total_duration"],
                    "processing_time": (datetime.now() - start_time).total_seconds(),
                    "plan_name": plan.get("name", "Unknown"),
                    "voice": speech_result["voice"]
                }, f, ensure_ascii=False, indent=2)
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –Ω–∞ –Ø.–î–∏—Å–∫–µ
            folder_structure = {
                "text": [plan_file, story_file],
                "audio": speech_result["audio_files"],
                "meta": [metadata_file, speech_result["order_file"]]
            }
            
            upload_result = await self.storage.upload_project(
                project_id,
                folder_structure,
                metadata={
                    "project_id": project_id,
                    "youtube_url": youtube_url,
                    "original_title": video_info["title"],
                    "word_count": processing_result["word_count"],
                    "audio_duration": speech_result["total_duration"],
                    "processing_time": (datetime.now() - start_time).total_seconds()
                }
            )
            
            results["steps"]["upload"] = {
                "status": "completed",
                "folder_url": upload_result["folder_url"],
                "files_uploaded": upload_result["files_count"]
            }
            
            await self._notify(callbacks, "upload_complete", 
                             f"‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {upload_result['folder_url']}")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results["status"] = "completed"
            results["processing_time"] = (datetime.now() - start_time).total_seconds()
            results["yandex_folder_url"] = upload_result["folder_url"]
            
            await self._notify(callbacks, "pipeline_complete", 
                             f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {results['processing_time']/60:.1f} –º–∏–Ω—É—Ç!\n"
                             f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {upload_result['folder_url']}")
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ pipeline: {str(e)}")
            results["status"] = "failed"
            results["error"] = str(e)
            
            await self._notify(callbacks, "pipeline_error", f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            
            raise
    
    async def _notify(self, callbacks: Optional[Dict[str, Any]], event: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±–µ–∫"""
        if callbacks and event in callbacks:
            try:
                await callbacks[event](message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–±–µ–∫–µ {event}: {e}")