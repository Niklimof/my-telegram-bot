# interfaces/telegram_bot/bot_improved.py
# –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–∞–Ω–æ–≤

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import uuid
from datetime import datetime
from typing import Dict, List, Optional
import json

from config.settings import settings
from database.crud import create_project, get_plans, get_default_settings, get_project, create_plan

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.TELEGRAM_TOKEN)
dp = Dispatcher()

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
class VideoStates(StatesGroup):
    waiting_for_url = State()
    selecting_plan = State()

class PlanCreationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    selecting_base_prompt = State()
    editing_prompt = State()
    selecting_voice = State()
    selecting_emotion = State()
    selecting_speed = State()
    confirming_plan = State()

# ===== –•–†–ê–ù–ò–õ–ò–©–ê =====
# –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {user_id: {project_id: process_data}}
active_processes = {}

# –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_projects = {}

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞
plan_drafts = {}

# ===== –≠–ú–û–î–ó–ò –ò –°–¢–ê–¢–£–°–´ =====
STAGE_EMOJIS = {
    "waiting": "‚è≥",
    "downloading": "üì•",
    "transcribing": "üìù",
    "processing": "ü§ñ",
    "generating_speech": "üéô",
    "uploading": "‚òÅÔ∏è",
    "completed": "‚úÖ",
    "failed": "‚ùå"
}

STAGE_NAMES = {
    "waiting": "–û–∂–∏–¥–∞–Ω–∏–µ",
    "downloading": "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ",
    "transcribing": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è",
    "processing": "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞",
    "generating_speech": "–°–æ–∑–¥–∞–Ω–∏–µ –æ–∑–≤—É—á–∫–∏",
    "uploading": "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –¥–∏—Å–∫",
    "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
    "failed": "–û—à–∏–±–∫–∞"
}

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =====
def get_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ", callback_data="new_video"),
        InlineKeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã", callback_data="my_processes")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –ü–ª–∞–Ω—ã", callback_data="plans_menu"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    )
    
    return builder.as_markup()

# ===== –ö–û–ú–ê–ù–î–ê START =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YouTube Automation Bot!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ:\n"
        "‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ –ø–æ –≤–∞—à–∏–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_menu()
    )

# ===== –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ü–†–û–¶–ï–°–°–û–í =====
def format_process_status(project_id: str, process_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    stages = [
        ("downloading", process_data.get("downloading", "waiting")),
        ("transcribing", process_data.get("transcribing", "waiting")),
        ("processing", process_data.get("processing", "waiting")),
        ("generating_speech", process_data.get("generating_speech", "waiting")),
        ("uploading", process_data.get("uploading", "waiting"))
    ]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = f"üìå *–ü—Ä–æ–µ–∫—Ç:* `{project_id[:8]}...`\n"
    text += f"üîó *URL:* {process_data.get('url', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    text += f"üìã *–ü–ª–∞–Ω:* {process_data.get('plan_name', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')}\n\n"
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    completed_stages = sum(1 for _, status in stages if status == "completed")
    total_stages = len(stages)
    progress = completed_stages / total_stages
    
    progress_bar = "["
    filled = int(progress * 20)
    progress_bar += "‚ñà" * filled + "‚ñë" * (20 - filled)
    progress_bar += f"] {int(progress * 100)}%"
    
    text += f"*–ü—Ä–æ–≥—Ä–µ—Å—Å:* {progress_bar}\n\n"
    
    # –≠—Ç–∞–ø—ã
    text += "*–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:*\n"
    for stage_key, status in stages:
        emoji = STAGE_EMOJIS.get(status, "‚è≥")
        name = STAGE_NAMES.get(stage_key, stage_key)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
        time_info = ""
        if status == "completed" and f"{stage_key}_time" in process_data:
            time_info = f" ({process_data[f'{stage_key}_time']})"
        elif status == "processing":
            time_info = " (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...)"
        
        text += f"{emoji} {name}{time_info}\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if process_data.get("current_info"):
        text += f"\nüí¨ {process_data['current_info']}"
    
    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    if process_data.get("started_at"):
        text += f"\n\nüïê –ù–∞—á–∞—Ç–æ: {process_data['started_at']}"
    
    return text

@dp.callback_query(F.data == "my_processes")
async def show_my_processes(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in active_processes or not active_processes[user_id]:
        await callback.message.edit_text(
            "üìä *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã*\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    text = "üìä *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:*\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for project_id, process_data in active_processes[user_id].items():
        status = process_data.get("status", "unknown")
        emoji = STAGE_EMOJIS.get(status, "‚ùì")
        
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        short_url = process_data.get("url", "")[:30] + "..."
        button_text = f"{emoji} {short_url}"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"process_{project_id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_processes"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("process_"))
async def show_process_details(callback: CallbackQuery):
    project_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    if user_id not in active_processes or project_id not in active_processes[user_id]:
        await callback.answer("–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    process_data = active_processes[user_id][project_id]
    text = format_process_status(project_id, process_data)
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if process_data.get("status") not in ["completed", "failed"]:
        builder.row(
            InlineKeyboardButton(text="‚è∏ –ü–∞—É–∑–∞", callback_data=f"pause_{project_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{project_id}")
        )
    
    if process_data.get("status") == "completed":
        builder.row(
            InlineKeyboardButton(
                text="üìÅ –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                url=process_data.get("result_url", "https://disk.yandex.ru")
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{project_id}"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_processes")
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# ===== –ú–ï–ù–Æ –ü–õ–ê–ù–û–í =====
@dp.callback_query(F.data == "plans_menu")
async def show_plans_menu(callback: CallbackQuery):
    plans = get_plans(is_active=True)
    
    text = "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n"
    text += "–ü–ª–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
    text += "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–ª–∞–Ω—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π.\n\n"
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    builder.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="create_plan")
    )
    
    # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–∞–Ω–æ–≤
    if plans:
        text += "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:*\n"
        for i, plan in enumerate(plans, 1):
            text += f"{i}. {plan.name}\n"
            builder.row(
                InlineKeyboardButton(
                    text=f"üëÅ {plan.name}",
                    callback_data=f"view_plan_{plan.id}"
                ),
                InlineKeyboardButton(
                    text="‚úèÔ∏è",
                    callback_data=f"edit_plan_{plan.id}"
                )
            )
    
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# ===== –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê =====
@dp.callback_query(F.data == "create_plan")
async def start_plan_creation(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–ª–∞–Ω–∞
    plan_drafts[user_id] = {
        "name": "",
        "description": "",
        "prompt": "",
        "voice": "alena",
        "emotion": "neutral",
        "speed": 1.0,
        "created_by": user_id
    }
    
    await callback.message.edit_text(
        "üÜï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞*\n\n"
        "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: _–î–∏–Ω–∞–º–∏—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏_ –∏–ª–∏ _–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç_\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="Markdown"
    )
    
    await state.set_state(PlanCreationStates.waiting_for_name)
    await callback.answer()

@dp.message(StateFilter(PlanCreationStates.waiting_for_name))
async def process_plan_name(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    user_id = message.from_user.id
    plan_drafts[user_id]["name"] = message.text
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: *{message.text}*\n\n"
        "–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞\n"
        "–û–ø–∏—à–∏—Ç–µ, –¥–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ—Ç –ø–ª–∞–Ω",
        parse_mode="Markdown"
    )
    
    await state.set_state(PlanCreationStates.waiting_for_description)

@dp.message(StateFilter(PlanCreationStates.waiting_for_description))
async def process_plan_description(message: types.Message, state: FSMContext):
    if message.text == "/cancel":
        await state.clear()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    user_id = message.from_user.id
    plan_drafts[user_id]["description"] = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
    builder = InlineKeyboardBuilder()
    
    templates = [
        ("üìñ –°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥", "storytelling"),
        ("üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π", "educational"),
        ("‚ö° –î–∏–Ω–∞–º–∏—á–Ω—ã–π", "dynamic"),
        ("üé≠ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π", "entertainment"),
        ("‚úçÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç", "custom")
    ]
    
    for name, template_id in templates:
        builder.row(
            InlineKeyboardButton(text=name, callback_data=f"template_{template_id}")
        )
    
    await message.answer(
        "–®–∞–≥ 3/6: –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞\n\n"
        "–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PlanCreationStates.selecting_base_prompt)

# –®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
PROMPT_TEMPLATES = {
    "storytelling": """–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏. 
–î–æ–±–∞–≤—å –∏–Ω—Ç—Ä–∏–≥—É, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, —Å–¥–µ–ª–∞–π –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ –ª–∏—á–Ω—ã–º –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º. 
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–µ–º—ã —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–∞: –∑–∞–≤—è–∑–∫–∞, —Ä–∞–∑–≤–∏—Ç–∏–µ, –∫—É–ª—å–º–∏–Ω–∞—Ü–∏—è. 
–î–æ–±–∞–≤—å –¥–∏–∞–ª–æ–≥–∏, –æ–ø–∏—Å–∞–Ω–∏—è, –¥–µ—Ç–∞–ª–∏. –†–∞—Å—à–∏—Ä—å –¥–æ 20000 —Å–ª–æ–≤.""",
    
    "educational": """–ê–¥–∞–ø—Ç–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. 
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ, –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –¥–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã, 
–∞–Ω–∞–ª–æ–≥–∏–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –†–∞–∑–¥–µ–ª–∏ –Ω–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏. 
–î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã. –¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–º - 20000 —Å–ª–æ–≤.""",
    
    "dynamic": """–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ –±–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω–æ–º –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ. 
–°–æ–∫—Ä–∞—Ç–∏ –ø–∞—É–∑—ã, –¥–æ–±–∞–≤—å —ç–º–æ—Ü–∏–π, —Å–¥–µ–ª–∞–π —Ä–µ—á—å –±–æ–ª–µ–µ –∂–∏–≤–æ–π –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π. 
–°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª. –†–∞—Å—à–∏—Ä—å —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, 
–ø—Ä–∏–º–µ—Ä—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–º - –ø—Ä–∏–º–µ—Ä–Ω–æ 20000 —Å–ª–æ–≤.""",
    
    "entertainment": """–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. 
–î–æ–±–∞–≤—å —é–º–æ—Ä –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã. 
–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. 
–ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –†–∞—Å—à–∏—Ä—å —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è–º–∏ –¥–æ 20000 —Å–ª–æ–≤."""
}

@dp.callback_query(F.data.startswith("template_"))
async def select_prompt_template(callback: CallbackQuery, state: FSMContext):
    template_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    if template_id == "custom":
        prompt = "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"
    else:
        prompt = PROMPT_TEMPLATES.get(template_id, "")
    
    plan_drafts[user_id]["prompt"] = prompt
    
    await callback.message.edit_text(
        f"–®–∞–≥ 4/6: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç\n\n"
        f"*–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:*\n```\n{prompt}\n```\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ /skip —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
        parse_mode="Markdown"
    )
    
    await state.set_state(PlanCreationStates.editing_prompt)
    await callback.answer()

@dp.message(StateFilter(PlanCreationStates.editing_prompt))
async def process_prompt_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if message.text != "/skip":
        plan_drafts[user_id]["prompt"] = message.text
    
    # –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
    builder = InlineKeyboardBuilder()
    
    voices = [
        ("üë© –ê–ª—ë–Ω–∞", "alena"),
        ("üë® –§–∏–ª–∏–ø–ø", "filipp"),
        ("üë® –ï—Ä–º–∏–ª", "ermil"),
        ("üë© –î–∂–µ–π–Ω", "jane"),
        ("üë® –ú–∞–¥–∏—Ä—É—Å", "madirus"),
        ("üë© –û–º–∞–∂", "omazh"),
        ("üë® –ó–∞—Ö–∞—Ä", "zahar")
    ]
    
    for name, voice_id in voices:
        builder.row(
            InlineKeyboardButton(text=name, callback_data=f"voice_{voice_id}")
        )
    
    await message.answer(
        "–®–∞–≥ 5/6: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PlanCreationStates.selecting_voice)

@dp.callback_query(F.data.startswith("voice_"))
async def select_voice(callback: CallbackQuery, state: FSMContext):
    voice_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    plan_drafts[user_id]["voice"] = voice_id
    
    # –í—ã–±–æ—Ä —ç–º–æ—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    
    emotions = [
        ("üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", "neutral"),
        ("üòä –†–∞–¥–æ—Å—Ç–Ω–∞—è", "good"),
        ("üò† –†–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–∞—è", "evil")
    ]
    
    for name, emotion_id in emotions:
        builder.row(
            InlineKeyboardButton(text=name, callback_data=f"emotion_{emotion_id}")
        )
    
    await callback.message.edit_text(
        "–®–∞–≥ 6/6: –í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ—Ü–∏—é –≥–æ–ª–æ—Å–∞",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PlanCreationStates.selecting_emotion)
    await callback.answer()

@dp.callback_query(F.data.startswith("emotion_"))
async def select_emotion_and_confirm(callback: CallbackQuery, state: FSMContext):
    emotion_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    plan_drafts[user_id]["emotion"] = emotion_id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    plan = plan_drafts[user_id]
    
    text = "üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–ª–∞–Ω:*\n\n"
    text += f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {plan['name']}\n"
    text += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {plan['description']}\n"
    text += f"*–ì–æ–ª–æ—Å:* {plan['voice']}\n"
    text += f"*–≠–º–æ—Ü–∏—è:* {plan['emotion']}\n\n"
    text += f"*–ü—Ä–æ–º–ø—Ç:*\n```\n{plan['prompt'][:500]}...\n```"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data="save_plan"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_plan")
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PlanCreationStates.confirming_plan)
    await callback.answer()

@dp.callback_query(F.data == "save_plan")
async def save_plan(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    plan_data = plan_drafts[user_id]
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞ –¥–ª—è –ë–î
    plan_dict = {
        "name": plan_data["name"],
        "description": plan_data["description"],
        "text_steps": [
            {
                "type": "extract_audio",
                "params": {"format": "mp3"}
            },
            {
                "type": "transcribe",
                "params": {
                    "language": "ru",
                    "model": "medium"
                }
            },
            {
                "type": "process_with_claude",
                "params": {
                    "prompt": plan_data["prompt"],
                    "model": "claude-3-sonnet-20240229",
                    "temperature": 0.7
                }
            },
            {
                "type": "generate_speech",
                "params": {
                    "voice": plan_data["voice"],
                    "emotion": plan_data["emotion"],
                    "speed": plan_data.get("speed", 1.0)
                }
            }
        ],
        "video_steps": [],
        "default_prompt": plan_data["prompt"],
        "default_voice": plan_data["voice"],
        "is_active": True,
        "modules_enabled": ["text"]
    }
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        new_plan = create_plan(plan_dict)
        
        await callback.message.edit_text(
            f"‚úÖ *–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {plan_data['name']}\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
        
        # –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
        del plan_drafts[user_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )
    
    await state.clear()
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û =====
@dp.callback_query(F.data == "new_video")
async def new_video_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìπ *–ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ `https://youtube.com/watch?v=...`\n"
        "‚Ä¢ `https://youtu.be/...`\n"
        "‚Ä¢ `https://m.youtube.com/watch?v=...`",
        parse_mode="Markdown"
    )
    await state.set_state(VideoStates.waiting_for_url)
    await callback.answer()

@dp.message(StateFilter(VideoStates.waiting_for_url))
async def process_url(message: types.Message, state: FSMContext):
    url = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not any(domain in url for domain in ["youtube.com", "youtu.be", "m.youtube.com"]):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
            "–ü—Ä–∏–º–µ—Ä: `https://youtube.com/watch?v=dQw4w9WgXcQ`",
            parse_mode="Markdown"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
    await state.update_data(youtube_url=url)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã
    plans = get_plans(is_active=True)
    
    if not plans:
        await message.answer(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –≤ –º–µ–Ω—é 'üìã –ü–ª–∞–Ω—ã'",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
    builder = InlineKeyboardBuilder()
    
    for plan in plans:
        builder.row(
            InlineKeyboardButton(
                text=f"üìã {plan.name}",
                callback_data=f"select_plan_{plan.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    
    await message.answer(
        "üìã *–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏:*",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(VideoStates.selecting_plan)

@dp.callback_query(F.data.startswith("select_plan_"))
async def select_plan_callback(callback: CallbackQuery, state: FSMContext):
    plan_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    project_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    if user_id not in active_processes:
        active_processes[user_id] = {}
    
    active_processes[user_id][project_id] = {
        "url": data["youtube_url"],
        "plan_id": plan_id,
        "plan_name": get_plan_name(plan_id),
        "status": "waiting",
        "started_at": datetime.now().strftime("%H:%M"),
        "downloading": "waiting",
        "transcribing": "waiting",
        "processing": "waiting",
        "generating_speech": "waiting",
        "uploading": "waiting"
    }
    
    await callback.message.edit_text(
        f"‚úÖ *–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!*\n"
        f"ID: `{project_id}`\n\n"
        f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìä –ú–æ–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã'",
        parse_mode="Markdown",
        reply_markup=get_main_menu()
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (–∏–º–∏—Ç–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    asyncio.create_task(simulate_processing(user_id, project_id))
    
    await state.clear()
    await callback.answer()

# ===== –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò =====
async def simulate_processing(user_id: int, project_id: str):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ UI"""
    stages = [
        ("downloading", "–ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...", 5),
        ("transcribing", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ...", 8),
        ("processing", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AI...", 10),
        ("generating_speech", "–°–æ–∑–¥–∞—é –æ–∑–≤—É—á–∫—É...", 12),
        ("uploading", "–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...", 5)
    ]
    
    for stage, info, duration in stages:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if user_id in active_processes and project_id in active_processes[user_id]:
            active_processes[user_id][project_id]["status"] = stage
            active_processes[user_id][project_id][stage] = "processing"
            active_processes[user_id][project_id]["current_info"] = info
            
            # –ñ–¥–µ–º
            await asyncio.sleep(duration)
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
            active_processes[user_id][project_id][stage] = "completed"
            active_processes[user_id][project_id][f"{stage}_time"] = f"{duration}—Å"
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if user_id in active_processes and project_id in active_processes[user_id]:
        active_processes[user_id][project_id]["status"] = "completed"
        active_processes[user_id][project_id]["current_info"] = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        active_processes[user_id][project_id]["result_url"] = "https://disk.yandex.ru/example"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await bot.send_message(
                user_id,
                f"‚úÖ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                f"–ü—Ä–æ–µ–∫—Ç: `{project_id}`\n"
                f"[–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã](https://disk.yandex.ru/example)",
                parse_mode="Markdown"
            )
        except:
            pass

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def get_plan_name(plan_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ ID"""
    try:
        from database.crud import get_plan
        plan = get_plan(plan_id)
        return plan.name if plan else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω"
    except:
        return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö =====
@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üëã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "refresh_processes")
async def refresh_processes(callback: CallbackQuery):
    await show_my_processes(callback)

@dp.callback_query(F.data.startswith("refresh_"))
async def refresh_process(callback: CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    await show_process_details(callback)

@dp.callback_query(F.data.startswith("pause_"))
async def pause_process(callback: CallbackQuery):
    project_id = callback.data.split("_")[1]
    await callback.answer("‚è∏ –§—É–Ω–∫—Ü–∏—è –ø–∞—É–∑—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_process(callback: CallbackQuery):
    project_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    if user_id in active_processes and project_id in active_processes[user_id]:
        active_processes[user_id][project_id]["status"] = "failed"
        active_processes[user_id][project_id]["current_info"] = "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
    
    await callback.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
    await show_process_details(callback)

@dp.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    help_text = """
‚ùì *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ:*
1. –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ "–ú–æ–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã"

*üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤:*
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ü–ª–∞–Ω—ã"
2. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω"
3. –°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∑–≤—É—á–∫–∏

*üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:*
‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
‚Ä¢ –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

*üí° –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–æ–º–ø—Ç—ã –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è

*üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    await callback.message.edit_text(
        help_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("view_plan_"))
async def view_plan_details(callback: CallbackQuery):
    plan_id = int(callback.data.split("_")[2])
    
    try:
        from database.crud import get_plan
        plan = get_plan(plan_id)
        
        if not plan:
            await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ
        claude_step = next(
            (step for step in plan.text_steps if step["type"] == "process_with_claude"),
            None
        )
        
        speech_step = next(
            (step for step in plan.text_steps if step["type"] == "generate_speech"),
            None
        )
        
        text = f"üìã *–ü–ª–∞–Ω: {plan.name}*\n\n"
        text += f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {plan.description}\n\n"
        
        if claude_step:
            prompt = claude_step["params"].get("prompt", "–ù–µ —É–∫–∞–∑–∞–Ω")
            text += f"*–ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:*\n```\n{prompt[:800]}{'...' if len(prompt) > 800 else ''}\n```\n\n"
        
        if speech_step:
            text += f"*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∑–≤—É—á–∫–∏:*\n"
            text += f"‚Ä¢ –ì–æ–ª–æ—Å: {speech_step['params'].get('voice', 'alena')}\n"
            text += f"‚Ä¢ –≠–º–æ—Ü–∏—è: {speech_step['params'].get('emotion', 'neutral')}\n"
            text += f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {speech_step['params'].get('speed', 1.0)}\n"
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_plan_{plan_id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_plan_{plan_id}")
        )
        builder.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="plans_menu")
        )
        
        await callback.message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_plan_"))
async def edit_plan(callback: CallbackQuery):
    await callback.answer("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith("delete_plan_"))
async def delete_plan(callback: CallbackQuery):
    await callback.answer("üóë –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", show_alert=True)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö =====
@dp.error()
async def error_handler(event: types.ErrorEvent):
    logger.error(f"Error in handler: {event.exception}")
    
    if event.update.message:
        await event.update.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    logger.info("Starting improved bot...")
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())