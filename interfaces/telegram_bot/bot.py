# interfaces/telegram_bot/improved_bot.py
# –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–æ–≤

import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import uuid
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from config.settings import settings
from database.crud import (
    create_project, get_plans, get_default_settings, 
    get_project, create_plan, get_plan
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
if not settings.TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

bot = Bot(token=settings.TELEGRAM_TOKEN)
dp = Dispatcher()

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
class VideoStates(StatesGroup):
    waiting_for_url = State()
    selecting_plan = State()

class PlanCreationStates(StatesGroup):
    entering_name = State()
    entering_description = State()
    selecting_type = State()
    entering_custom_prompt = State()
    entering_voice_settings = State()
    reviewing_plan = State()

# ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
# –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è 80-100 –º–∏–Ω—É—Ç –≤–∏–¥–µ–æ
TARGET_WORDS = 13500  # –°—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É 12000-15000

# –®–∞–±–ª–æ–Ω—ã –ø–ª–∞–Ω–æ–≤
PLAN_TEMPLATES = {
    "horror_story": {
        "name": "üéÉ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑",
        "description": "–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥–µ–æ –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é –∏—Å—Ç–æ—Ä–∏—é —É–∂–∞—Å–æ–≤",
        "prompt_template": """–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–£:
1. –ñ–∞–Ω—Ä: –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ö–æ—Ä—Ä–æ—Ä —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∏—Å—Ç–∏–∫–∏
2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 3 –∞–∫—Ç–∞ —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º
3. –û–±—ä–µ–º: –ø–ª–∞–Ω –Ω–∞ {target_words} —Å–ª–æ–≤ (~90 –º–∏–Ω—É—Ç –∞—É–¥–∏–æ)
4. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: –∑–ª–æ–≤–µ—â–∞—è, —Ç—Ä–µ–≤–æ–∂–Ω–∞—è, —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–π –ø–∞—Ä–∞–Ω–æ–π–µ–π

–°–¢–†–£–ö–¢–£–†–ê –ü–õ–ê–ù–ê:
- –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å–∫–∞–∑–∞
- –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∏ —Ç–≤–∏—Å—Ç
- –ì–ª–∞–≤–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ (3-4) —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞–º–∏
- –ê–ö–¢ 1: –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è (25%) - –æ–±—ã—á–Ω–∞—è –∂–∏–∑–Ω—å —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
- –ê–ö–¢ 2: –†–∞–∑–≤–∏—Ç–∏–µ (50%) - —ç—Å–∫–∞–ª–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
- –ê–ö–¢ 3: –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è (25%) - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —à–æ–∫–∏—Ä—É—é—â–∏–π —Ñ–∏–Ω–∞–ª
- –ö–ª—é—á–µ–≤—ã–µ —Å—Ü–µ–Ω—ã (10-12) —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å–∏–º–≤–æ–ª—ã

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:
{text}"""
    },
    
    "educational_story": {
        "name": "üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
        "description": "–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—É—á–∞—é—â–∏–π —Ä–∞—Å—Å–∫–∞–∑",
        "prompt_template": """–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –ø–ª–∞–Ω —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –§–æ—Ä–º–∞—Ç: –∏—Å—Ç–æ—Ä–∏—è-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
2. –¶–µ–ª—å: –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
3. –û–±—ä–µ–º: –ø–ª–∞–Ω –Ω–∞ {target_words} —Å–ª–æ–≤
4. –°—Ç–∏–ª—å: –¥–∏–Ω–∞–º–∏—á–Ω—ã–π, —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏

–°–¢–†–£–ö–¢–£–†–ê –ü–õ–ê–ù–ê:
- –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–ª—å
- –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π (–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å/—É—á–µ–Ω—ã–π/–∂—É—Ä–Ω–∞–ª–∏—Å—Ç)
- –ö–≤–µ—Å—Ç –∏–ª–∏ –º–∏—Å—Å–∏—è –≥–µ—Ä–æ—è
- –≠—Ç–∞–ø—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º–∞–º –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
- –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –∏—Ö –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ
- –í—Å—Ç—Ä–µ—á–∏ —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ (–¥–∏–∞–ª–æ–≥–∏)
- –û—Ç–∫—Ä—ã—Ç–∏—è –∏ –æ–∑–∞—Ä–µ–Ω–∏—è
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ñ–∏–Ω–∞–ª

–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:
{text}"""
    },
    
    "personal_story": {
        "name": "üí≠ –õ–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
        "description": "–°–æ–∑–¥–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞",
        "prompt_template": """–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
2. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å
3. –û–±—ä–µ–º: –ø–ª–∞–Ω –Ω–∞ {target_words} —Å–ª–æ–≤
4. –§–æ–∫—É—Å –Ω–∞ –ª–∏—á–Ω–æ–º –æ–ø—ã—Ç–µ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö

–°–¢–†–£–ö–¢–£–†–ê:
- –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç
- –ì–µ—Ä–æ–π-—Ä–∞—Å—Å–∫–∞–∑—á–∏–∫ (–¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç)
- –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
- –ö–∞—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –ü—É—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (5-7 —ç—Ç–∞–ø–æ–≤)
- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —Å–æ–º–Ω–µ–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
- –ö—É–ª—å–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
- –ù–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ä–æ—Å—Ç
- –ü–æ—Å–ª–∞–Ω–∏–µ —á–∏—Ç–∞—Ç–µ–ª—é

–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:
{text}"""
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
user_projects = {}
plan_creation_data = {}

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ", callback_data="new_video")],
        [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞–º–∏", callback_data="manage_plans")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å YouTube –≤–∏–¥–µ–æ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Å–∫–∞–∑—ã.\n\n"
        "üéØ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏ –∏–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –°–æ–∑–¥–∞—é –∏–∑ –Ω–µ–≥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π —Ä–∞—Å—Å–∫–∞–∑ (80-100 –º–∏–Ω—É—Ç)\n"
        "‚Ä¢ –û–∑–≤—É—á–∏–≤–∞—é —á–µ—Ä–µ–∑ Yandex SpeechKit\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n\n"
        "üé® –ò—Å–ø–æ–ª—å–∑—É—é –¥–≤–æ–π–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Claude AI –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–ù–ê–ú–ò =====
@dp.callback_query(lambda c: c.data == "manage_plans")
async def manage_plans_callback(callback: CallbackQuery):
    plans = get_plans(is_active=True)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="create_plan")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤", callback_data="list_plans")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        f"üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {len(plans)}\n\n"
        f"–ü–ª–∞–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, –∫–∞–∫ –≤–∏–¥–µ–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—Å–∫–∞–∑",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "create_plan")
async def create_plan_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    plan_creation_data[user_id] = {}
    
    await callback.message.edit_text(
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞*\n\n"
        "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: _–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏_ –∏–ª–∏ _–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è_",
        parse_mode="Markdown"
    )
    
    await state.set_state(PlanCreationStates.entering_name)
    await callback.answer()

@dp.message(PlanCreationStates.entering_name)
async def process_plan_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    plan_creation_data[user_id]["name"] = message.text
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: *{message.text}*\n\n"
        f"–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞\n\n"
        f"–û–ø–∏—à–∏—Ç–µ, –¥–ª—è –∫–∞–∫–∏—Ö –≤–∏–¥–µ–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ—Ç –ø–ª–∞–Ω:",
        parse_mode="Markdown"
    )
    
    await state.set_state(PlanCreationStates.entering_description)

@dp.message(PlanCreationStates.entering_description)
async def process_plan_description(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    plan_creation_data[user_id]["description"] = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –ø–ª–∞–Ω–æ–≤
    builder = InlineKeyboardBuilder()
    
    for template_id, template_info in PLAN_TEMPLATES.items():
        builder.row(
            InlineKeyboardButton(
                text=template_info["name"],
                callback_data=f"template_{template_id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="‚úèÔ∏è –°–≤–æ–π –ø—Ä–æ–º–ø—Ç",
            callback_data="custom_prompt"
        )
    )
    
    await message.answer(
        "–®–∞–≥ 3/5: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–Ω–∞\n\n"
        "–≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–µ–∫—Å—Ç:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PlanCreationStates.selecting_type)

@dp.callback_query(lambda c: c.data.startswith("template_"))
async def process_template_selection(callback: CallbackQuery, state: FSMContext):
    template_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    template = PLAN_TEMPLATES[template_id]
    plan_creation_data[user_id]["template"] = template_id
    plan_creation_data[user_id]["prompt_template"] = template["prompt_template"]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
    builder = InlineKeyboardBuilder()
    voices = {
        "alena": "üë© –ê–ª—ë–Ω–∞ (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)",
        "jane": "üë© –î–∂–µ–π–Ω (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)",
        "omazh": "üë® –û–º–∞–∂ (–º—É–∂—Å–∫–æ–π)"
    }
    
    for voice_id, voice_name in voices.items():
        builder.row(
            InlineKeyboardButton(
                text=voice_name,
                callback_data=f"voice_{voice_id}"
            )
        )
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: *{template['name']}*\n\n"
        f"–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PlanCreationStates.entering_voice_settings)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "custom_prompt")
async def custom_prompt_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úèÔ∏è *–°–≤–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ Claude*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —Ä–∞—Å—Å–∫–∞–∑–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
        "‚Ä¢ `{text}` - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ\n"
        "‚Ä¢ `{target_words}` - —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–ø—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="Markdown"
    )
    
    await state.set_state(PlanCreationStates.entering_custom_prompt)
    await callback.answer()

@dp.message(PlanCreationStates.entering_custom_prompt)
async def process_custom_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    plan_creation_data[user_id]["prompt_template"] = message.text
    plan_creation_data[user_id]["template"] = "custom"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞
    builder = InlineKeyboardBuilder()
    voices = {
        "alena": "üë© –ê–ª—ë–Ω–∞",
        "jane": "üë© –î–∂–µ–π–Ω", 
        "omazh": "üë® –û–º–∞–∂"
    }
    
    for voice_id, voice_name in voices.items():
        builder.row(
            InlineKeyboardButton(
                text=voice_name,
                callback_data=f"voice_{voice_id}"
            )
        )
    
    await message.answer(
        "–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PlanCreationStates.entering_voice_settings)

@dp.callback_query(lambda c: c.data.startswith("voice_"))
async def process_voice_selection(callback: CallbackQuery, state: FSMContext):
    voice_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    plan_creation_data[user_id]["voice"] = voice_id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±–∑–æ—Ä
    data = plan_creation_data[user_id]
    
    review_text = f"""üìã *–û–±–∑–æ—Ä –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {data['name']}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {data['description']}
*–¢–∏–ø:* {PLAN_TEMPLATES.get(data.get('template', 'custom'), {}).get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π')}
*–ì–æ–ª–æ—Å:* {voice_id}
*–¶–µ–ª–µ–≤–æ–π –æ–±—ä–µ–º:* {TARGET_WORDS} —Å–ª–æ–≤ (~90 –º–∏–Ω—É—Ç)

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω?"""
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_plan"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_plan")
    )
    
    await callback.message.edit_text(
        review_text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PlanCreationStates.reviewing_plan)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "save_plan")
async def save_plan_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = plan_creation_data[user_id]
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞ —Å –¥–≤—É–º—è –¥–∏–∞–ª–æ–≥–∞–º–∏ Claude
    plan_data = {
        "name": data["name"],
        "description": data["description"],
        "text_steps": [
            {
                "type": "extract_audio",
                "params": {"format": "mp3"}
            },
            {
                "type": "transcribe",
                "params": {
                    "language": "ru",
                    "model": "large"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º large –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                }
            },
            {
                "type": "create_story_plan",  # –ü–µ—Ä–≤—ã–π Claude
                "params": {
                    "prompt": data["prompt_template"],
                    "model": "claude-3-sonnet-20240229",
                    "temperature": 0.7,
                    "target_words": TARGET_WORDS
                }
            },
            {
                "type": "write_story",  # –í—Ç–æ—Ä–æ–π Claude
                "params": {
                    "model": "claude-3-sonnet-20240229",
                    "temperature": 0.8,
                    "target_words": TARGET_WORDS
                }
            },
            {
                "type": "generate_speech",
                "params": {
                    "voice": data["voice"],
                    "emotion": "neutral",
                    "speed": 1.0
                }
            }
        ],
        "video_steps": [],
        "default_prompt": data["prompt_template"],
        "default_voice": data["voice"],
        "is_active": True,
        "modules_enabled": ["text"],
        "metadata": {
            "target_words": TARGET_WORDS,
            "template": data.get("template", "custom")
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    plan = create_plan(plan_data)
    
    await callback.message.edit_text(
        f"‚úÖ –ü–ª–∞–Ω *{data['name']}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"ID –ø–ª–∞–Ω–∞: `{plan.id}`\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ.",
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del plan_creation_data[user_id]
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(2)
    await cmd_start(callback.message)
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–î–ï–û =====
@dp.callback_query(lambda c: c.data == "new_video")
async def new_video_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://youtube.com/watch?v=...\n"
        "‚Ä¢ https://youtu.be/...\n"
        "‚Ä¢ https://m.youtube.com/watch?v=..."
    )
    await state.set_state(VideoStates.waiting_for_url)
    await callback.answer()

@dp.message(VideoStates.waiting_for_url)
async def process_url(message: types.Message, state: FSMContext):
    url = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not any(domain in url for domain in ["youtube.com", "youtu.be", "m.youtube.com"]):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
    await state.update_data(youtube_url=url)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã
    plans = get_plans(is_active=True)
    
    if not plans:
        await message.answer(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞–º–∏'."
        )
        await state.clear()
        return
    
    # –ï—Å–ª–∏ –ø–ª–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if len(plans) == 1:
        plan = plans[0]
        await message.answer(
            f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–ª–∞–Ω: *{plan.name}*\n\n"
            f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
            parse_mode="Markdown"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        await create_and_start_project(message, state, plan.id, url)
        return
    
    # –ï—Å–ª–∏ –ø–ª–∞–Ω–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    keyboard_buttons = []
    for plan in plans:
        button_text = f"üìã {plan.name}"
        if plan.description:
            button_text += f"\nüí° {plan.description[:50]}..."
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"plan_{plan.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=keyboard
    )
    await state.set_state(VideoStates.selecting_plan)

async def create_and_start_project(message: types.Message, state: FSMContext, plan_id: int, url: str):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    project_id = str(uuid.uuid4())
    settings_obj = get_default_settings()
    
    project = create_project({
        "id": project_id,
        "youtube_url": url,
        "plan_id": plan_id,
        "settings_id": settings_obj.id if settings_obj else 1,
        "telegram_user_id": message.from_user.id,
        "telegram_chat_id": message.chat.id,
        "phase": 1,
        "status": "created"
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    if user_id not in user_projects:
        user_projects[user_id] = []
    user_projects[user_id].append(project_id)
    
    await message.answer(
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!\n"
        f"ID: `{project_id}`\n\n"
        f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
        f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 80-100 –º–∏–Ω—É—Ç\n"
        f"üìä –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
        parse_mode="Markdown"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Celery
    try:
        from workers.tasks.text_tasks import process_text_pipeline
        process_text_pipeline.delay(project_id)
        logger.info(f"–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Celery –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        )
    
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("plan_"))
async def select_plan_callback(callback: CallbackQuery, state: FSMContext):
    plan_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    
    plan = get_plan(plan_id)
    await callback.message.edit_text(
        f"üìã –í—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: *{plan.name}*\n\n"
        f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
        parse_mode="Markdown"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    await create_and_start_project(callback.message, state, plan_id, data["youtube_url"])
    await callback.answer()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
@dp.callback_query(lambda c: c.data == "list_plans")
async def list_plans_callback(callback: CallbackQuery):
    plans = get_plans(is_active=True)
    
    if not plans:
        await callback.message.edit_text(
            "üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        await callback.answer()
        return
    
    text = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã:*\n\n"
    
    for i, plan in enumerate(plans, 1):
        text += f"{i}. *{plan.name}*\n"
        text += f"   _{plan.description}_\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if plan.metadata:
            template = plan.metadata.get("template", "custom")
            if template in PLAN_TEMPLATES:
                text += f"   –¢–∏–ø: {PLAN_TEMPLATES[template]['name']}\n"
        
        text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="create_plan")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await cmd_start(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel")
async def cancel_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await cmd_start(callback.message)
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö =====
@dp.error()
async def error_handler(event: types.ErrorEvent):
    logger.error(f"Error in handler: {event.exception}")
    
    if event.update.message:
        await event.update.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# ===== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
async def notify_progress(chat_id: int, project_id: str, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        await bot.send_message(
            chat_id,
            f"üìä –ü—Ä–æ–µ–∫—Ç `{project_id[:8]}...`\n{message}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    logger.info("Starting improved bot...")
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())