# interfaces/telegram_bot/bot.py
# Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∏–¥–µ–æ

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import uuid
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from config.settings import settings
from database.crud import create_project, get_plans, get_default_settings, get_project

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.TELEGRAM_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class VideoStates(StatesGroup):
    waiting_for_url = State()
    selecting_plan = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_projects = {}

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ", callback_data="new_video")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É YouTube –≤–∏–¥–µ–æ.\n\n"
        "üéØ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube\n"
        "‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Claude AI (~20k —Å–ª–æ–≤)\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –æ–∑–≤—É—á–∫—É —á–µ—Ä–µ–∑ Yandex SpeechKit\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "new_video")
async def new_video_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://youtube.com/watch?v=...\n"
        "‚Ä¢ https://youtu.be/...\n"
        "‚Ä¢ https://m.youtube.com/watch?v=..."
    )
    await state.set_state(VideoStates.waiting_for_url)
    await callback.answer()

@dp.message(VideoStates.waiting_for_url)
async def process_url(message: types.Message, state: FSMContext):
    url = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not any(domain in url for domain in ["youtube.com", "youtu.be", "m.youtube.com"]):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
            "–ü—Ä–∏–º–µ—Ä: https://youtube.com/watch?v=dQw4w9WgXcQ"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
    await state.update_data(youtube_url=url)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã
    plans = get_plans(is_active=True)
    
    if not plans:
        await message.answer(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞."
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏
    keyboard_buttons = []
    for plan in plans:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        button_text = f"üìã {plan.name}"
        if plan.description:
            button_text += f"\nüí° {plan.description[:50]}..."
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"plan_{plan.id}"
            )
        ])
    
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n\n"
        "–ö–∞–∂–¥—ã–π –ø–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ",
        reply_markup=keyboard
    )
    await state.set_state(VideoStates.selecting_plan)

@dp.callback_query(lambda c: c.data.startswith("plan_"))
async def select_plan_callback(callback: types.CallbackQuery, state: FSMContext):
    plan_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    project_id = str(uuid.uuid4())
    settings_obj = get_default_settings()
    
    project = create_project({
        "id": project_id,
        "youtube_url": data["youtube_url"],
        "plan_id": plan_id,
        "settings_id": settings_obj.id if settings_obj else 1,
        "telegram_user_id": callback.from_user.id,
        "telegram_chat_id": callback.message.chat.id,
        "phase": 1,  # –§–∞–∑–∞ 1 - —Ç–µ–∫—Å—Ç –∏ –æ–∑–≤—É—á–∫–∞
        "status": "created"
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    if user_id not in user_projects:
        user_projects[user_id] = []
    user_projects[user_id].append(project_id)
    
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω!\n"
        f"ID: `{project_id}`\n\n"
        f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n"
        f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 60-90 –º–∏–Ω—É—Ç\n"
        f"üìä –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ",
        parse_mode="Markdown"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ Celery
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from workers.tasks.simple_tasks import process_video_simple
        process_video_simple.delay(project_id, data["youtube_url"])
        logger.info(f"–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Celery –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
    except ImportError:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Celery –∑–∞–¥–∞—á—É")
        await callback.message.answer(
            "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await state.clear()
    await callback.answer()

@dp.callback_query(lambda c: c.data == "my_projects")
async def my_projects_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in user_projects or not user_projects[user_id]:
        await callback.message.answer(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–µ–∫—Ç–æ–≤
    recent_projects = user_projects[user_id][-5:]
    
    text = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:\n\n"
    
    for project_id in reversed(recent_projects):
        project = get_project(project_id)
        if project:
            status_emoji = {
                "created": "üÜï",
                "processing": "‚öôÔ∏è",
                "completed": "‚úÖ",
                "failed": "‚ùå"
            }.get(project.status, "‚ùì")
            
            text += f"{status_emoji} `{project_id[:8]}...`\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {project.status}\n"
            
            if project.processed_word_count:
                text += f"   –°–ª–æ–≤: {project.processed_word_count}\n"
            
            if project.yandex_folder_url:
                text += f"   [–†–µ–∑—É–ª—å—Ç–∞—Ç—ã]({project.yandex_folder_url})\n"
            
            text += "\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_projects")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def help_callback(callback: types.CallbackQuery):
    help_text = """
‚ùì **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ:**
1. –ù–∞–∂–º–∏—Ç–µ "üìπ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube
3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (~60-90 –º–∏–Ω—É—Ç)

**–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:**
‚Ä¢ –í–∏–¥–µ–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è —Å YouTube
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫–∞
‚Ä¢ –†–µ—á—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç
‚Ä¢ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ Claude AI
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç ~20k —Å–ª–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ–∑–≤—É—á–∫–∞ —á–µ—Ä–µ–∑ SpeechKit
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º
‚Ä¢ –Ø–∑—ã–∫ –≤–∏–¥–µ–æ - —Ä—É—Å—Å–∫–∏–π
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ª—é–±–∞—è

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (txt)
‚Ä¢ –û–∑–≤—É—á–∫–∞ –ø–æ —á–∞—Å—Ç—è–º (mp3)
‚Ä¢ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.answer(
        help_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel")
async def cancel_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await cmd_start(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    await cmd_start(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "refresh_projects")
async def refresh_projects_callback(callback: types.CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º my_projects_callback —Å–Ω–æ–≤–∞
    await my_projects_callback(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.error()
async def error_handler(event: types.ErrorEvent):
    logger.error(f"Error in handler: {event.exception}")
    
    if event.update.message:
        await event.update.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())