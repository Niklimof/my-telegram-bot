# interfaces/telegram_bot/advanced_plan_creator.py
# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å–∫–∞–∑–æ–≤

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json
from typing import Dict, List, Optional

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–ê =====
class AdvancedPlanStates(StatesGroup):
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    selecting_genre = State()
    selecting_subgenre = State()
    selecting_audience = State()
    entering_name = State()
    entering_description = State()
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
    selecting_structure = State()
    customizing_acts = State()
    
    # –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ —Å—Ç–∏–ª—å
    selecting_atmosphere = State()
    selecting_narrative_style = State()
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
    selecting_word_count = State()
    configuring_voice = State()
    adding_special_instructions = State()
    
    # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    reviewing_plan = State()
    saving_plan = State()

# ===== –®–ê–ë–õ–û–ù–´ –ò –û–ü–¶–ò–ò =====

GENRES = {
    "horror": {
        "name": "üéÉ –£–∂–∞—Å—ã",
        "subgenres": ["–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ö–æ—Ä—Ä–æ—Ä", "–ú–∏—Å—Ç–∏–∫–∞", "–ì–æ—Ä–æ–¥—Å–∫–∏–µ –ª–µ–≥–µ–Ω–¥—ã", "–ü–∞—Ä–∞–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ"],
        "atmospheres": ["–ù–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è", "–ó–ª–æ–≤–µ—â–∞—è", "–¢—Ä–µ–≤–æ–∂–Ω–∞—è", "–ì–Ω–µ—Ç—É—â–∞—è"],
        "elements": ["–°–∞—Å–ø–µ–Ω—Å", "–í–Ω–µ–∑–∞–ø–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã", "–ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π —Å—Ç—Ä–∞—Ö", "–ñ—É—Ç–∫–∏–µ –¥–µ—Ç–∞–ª–∏"]
    },
    "detective": {
        "name": "üîç –î–µ—Ç–µ–∫—Ç–∏–≤",
        "subgenres": ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ù—É–∞—Ä", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π"],
        "atmospheres": ["–ó–∞–≥–∞–¥–æ—á–Ω–∞—è", "–ù–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è", "–ò–Ω—Ç—Ä–∏–≥—É—é—â–∞—è"],
        "elements": ["–£–ª–∏–∫–∏", "–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ", "–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–†–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ"]
    },
    "drama": {
        "name": "üé≠ –î—Ä–∞–º–∞",
        "subgenres": ["–°–µ–º–µ–π–Ω–∞—è", "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è", "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è"],
        "atmospheres": ["–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è", "–¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è", "–ù–∞–ø—Ä—è–∂–µ–Ω–Ω–∞—è"],
        "elements": ["–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã", "–†–∞–∑–≤–∏—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", "–≠–º–æ—Ü–∏–∏", "–û—Ç–Ω–æ—à–µ–Ω–∏—è"]
    },
    "fantasy": {
        "name": "üßô –§—ç–Ω—Ç–µ–∑–∏",
        "subgenres": ["–≠–ø–∏—á–µ—Å–∫–æ–µ", "–ì–æ—Ä–æ–¥—Å–∫–æ–µ", "–¢–µ–º–Ω–æ–µ", "–°–∫–∞–∑–æ—á–Ω–æ–µ"],
        "atmospheres": ["–í–æ–ª—à–µ–±–Ω–∞—è", "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è", "–≠–ø–∏—á–µ—Å–∫–∞—è"],
        "elements": ["–ú–∞–≥–∏—è", "–ö–≤–µ—Å—Ç—ã", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å—É—â–µ—Å—Ç–≤–∞", "–î—Ä—É–≥–∏–µ –º–∏—Ä—ã"]
    }
}

AUDIENCES = {
    "general": "üë• –û–±—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
    "male_25_45": "üë® –ú—É–∂—á–∏–Ω—ã 25-45 –ª–µ—Ç",
    "female_25_45": "üë© –ñ–µ–Ω—â–∏–Ω—ã 25-45 –ª–µ—Ç",
    "young_adults": "üßë –ú–æ–ª–æ–¥–µ–∂—å 18-25 –ª–µ—Ç",
    "mature": "üë¥üëµ –í–∑—Ä–æ—Å–ª–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è 45+"
}

STRUCTURES = {
    "three_act": {
        "name": "üìñ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ç—Ä–µ—Ö–∞–∫—Ç–Ω–∞—è",
        "description": "–ó–∞–≤—è–∑–∫–∞ (25%) ‚Üí –†–∞–∑–≤–∏—Ç–∏–µ (50%) ‚Üí –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è –∏ —Ä–∞–∑–≤—è–∑–∫–∞ (25%)",
        "acts": ["–ê–∫—Ç 1: –ó–∞–≤—è–∑–∫–∞", "–ê–∫—Ç 2: –†–∞–∑–≤–∏—Ç–∏–µ", "–ê–∫—Ç 3: –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è"]
    },
    "five_act": {
        "name": "üìö –ü—è—Ç–∏–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
        "description": "–≠–∫—Å–ø–æ–∑–∏—Ü–∏—è ‚Üí –†–∞–∑–≤–∏—Ç–∏–µ ‚Üí –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è ‚Üí –°–ø–∞–¥ ‚Üí –†–∞–∑–≤—è–∑–∫–∞",
        "acts": ["–≠–∫—Å–ø–æ–∑–∏—Ü–∏—è", "–†–∞–∑–≤–∏—Ç–∏–µ", "–ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è", "–°–ø–∞–¥ –¥–µ–π—Å—Ç–≤–∏—è", "–†–∞–∑–≤—è–∑–∫–∞"]
    },
    "circular": {
        "name": "üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è",
        "description": "–ò—Å—Ç–æ—Ä–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω–∞—á–∞–ª—É, –Ω–æ —Å –Ω–æ–≤—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º",
        "acts": ["–ù–∞—á–∞–ª–æ", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", "–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ", "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ"]
    },
    "nonlinear": {
        "name": "üîÄ –ù–µ–ª–∏–Ω–µ–π–Ω–∞—è",
        "description": "–°–æ–±—ã—Ç–∏—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ",
        "acts": ["–ù–∞—Å—Ç–æ—è—â–µ–µ", "–§–ª–µ—à–±–µ–∫–∏", "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏", "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ"]
    }
}

NARRATIVE_STYLES = {
    "first_person": "üë§ –û—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞",
    "third_person": "üë• –û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞",
    "omniscient": "üëÅ –í—Å–µ–∑–Ω–∞—é—â–∏–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫",
    "limited": "üîç –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞",
    "multiple": "üé≠ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫–∏"
}

# ===== –•–†–ê–ù–ò–õ–ò–©–ï –ü–õ–ê–ù–û–í –í –ü–†–û–¶–ï–°–°–ï –°–û–ó–î–ê–ù–ò–Ø =====
plan_drafts = {}

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ú–ü–¢–û–í =====

def build_base_prompt(plan_data: Dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞"""
    
    genre_info = GENRES.get(plan_data['genre'], {})
    structure_info = STRUCTURES.get(plan_data['structure'], {})
    
    prompt = f"""–°–æ–∑–¥–∞–π {genre_info.get('name', '—Ä–∞—Å—Å–∫–∞–∑')} –≤ –ø–æ–¥–∂–∞–Ω—Ä–µ "{plan_data.get('subgenre', '')}" –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {AUDIENCES.get(plan_data['audience'], '–æ–±—â–∞—è')}.

–°–¢–†–£–ö–¢–£–†–ê: {structure_info.get('name', '–¢—Ä–µ—Ö–∞–∫—Ç–Ω–∞—è')}
{structure_info.get('description', '')}

–ê–¢–ú–û–°–§–ï–†–ê: {', '.join(plan_data.get('atmospheres', []))}

–°–¢–ò–õ–¨ –ü–û–í–ï–°–¢–í–û–í–ê–ù–ò–Ø: {NARRATIVE_STYLES.get(plan_data.get('narrative_style', 'third_person'))}

–û–ë–™–ï–ú: {plan_data.get('word_count', 20000)} —Å–ª–æ–≤

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫
2. –ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –∂–∏–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
3. –°–æ–∑–¥–∞–≤–∞–π –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å
4. –ö–∞–∂–¥–∞—è —Å—Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å —Å—é–∂–µ—Ç
5. –§–∏–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è

–û–°–û–ë–´–ï –£–ö–ê–ó–ê–ù–ò–Ø:
{plan_data.get('special_instructions', '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π')}

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –û–ó–í–£–ß–ö–ò:
- –†–∞–∑–¥–µ–ª—è–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ—Ç–æ—á–∏—è –¥–ª—è –ø–∞—É–∑
- –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –î–∏–∞–ª–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–∫—Ç–∞–º
    if plan_data.get('act_details'):
        prompt += "\n\n–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–û –ê–ö–¢–ê–ú:\n"
        for act, details in plan_data['act_details'].items():
            prompt += f"\n{act}:\n{details}\n"
    
    return prompt

def build_act_instructions(genre: str, structure: str, act_number: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∞"""
    
    templates = {
        "horror": {
            "three_act": {
                1: """- –ü—Ä–µ–¥—Å—Ç–∞–≤—å –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤ –æ–±—ã—á–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ
- –°–æ–∑–¥–∞–π —Ç—Ä–µ–≤–æ–∂–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª–∏
- –í–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–π –Ω–∞–º–µ–∫ –Ω–∞ —Å–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ
- –ó–∞–∫–æ–Ω—á–∏ –ø–µ—Ä–≤—ã–º –ø—É–≥–∞—é—â–∏–º —Å–æ–±—ã—Ç–∏–µ–º""",
                2: """- –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
- –†–∞—Å–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Å—Ç–∞/–ø—Ä–æ–∫–ª—è—Ç–∏—è
- –ù–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –ø–∞—Ä–∞–Ω–æ–π–∏ –≥–µ—Ä–æ—è
- –°–µ—Ä–∏—è –ø—É–≥–∞—é—â–∏—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ—Ä–æ–Ω—Ç–∞—Ü–∏–∏""",
                3: """- –ö—É–ª—å–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–æ –∑–ª–æ–º
- –†–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ç–∞–π–Ω
- –ë–æ—Ä—å–±–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ
- –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–≤–∏—Å—Ç –∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
            }
        },
        "detective": {
            "three_act": {
                1: """- –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è
- –ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç–∞ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è
- –í–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö""",
                2: """- –°–±–æ—Ä —É–ª–∏–∫ –∏ –¥–æ–ø—Ä–æ—Å—ã
- –õ–æ–∂–Ω—ã–µ —Å–ª–µ–¥—ã –∏ —Ç—É–ø–∏–∫–∏
- –£–≥–ª—É–±–ª–µ–Ω–∏–µ –≤ –º–æ—Ç–∏–≤—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
- –°—É–∂–µ–Ω–∏–µ –∫—Ä—É–≥–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö""",
                3: """- –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–æ–≥–∞–¥–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
- –°–±–æ—Ä –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
- –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
            }
        }
    }
    
    return templates.get(genre, {}).get(structure, {}).get(act_number, "–†–∞–∑–≤–∏–≤–∞–π —Å—é–∂–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∂–∞–Ω—Ä—É")

# ===== –ò–ù–¢–ï–†–§–ï–ô–° –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–ê =====

async def start_advanced_plan_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø–ª–∞–Ω–∞"""
    
    user_id = callback.from_user.id
    plan_drafts[user_id] = {
        "creator_id": user_id,
        "genre": "",
        "subgenre": "",
        "audience": "",
        "name": "",
        "description": "",
        "structure": "",
        "atmospheres": [],
        "narrative_style": "",
        "word_count": 20000,
        "voice_settings": {},
        "special_instructions": "",
        "act_details": {}
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞
    builder = InlineKeyboardBuilder()
    
    for genre_id, genre_info in GENRES.items():
        builder.row(
            InlineKeyboardButton(
                text=genre_info["name"],
                callback_data=f"genre_{genre_id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_plan")
    )
    
    await callback.message.edit_text(
        "üìö *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞*\n\n"
        "–®–∞–≥ 1/10: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∂–∞–Ω—Ä\n\n"
        "–≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤–∞—à–µ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞.",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AdvancedPlanStates.selecting_genre)
    await callback.answer()

async def process_genre_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞"""
    
    genre_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    plan_drafts[user_id]["genre"] = genre_id
    genre_info = GENRES[genre_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∂–∞–Ω—Ä—ã
    builder = InlineKeyboardBuilder()
    
    for subgenre in genre_info["subgenres"]:
        builder.row(
            InlineKeyboardButton(
                text=subgenre,
                callback_data=f"subgenre_{subgenre}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_genre")
    )
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –∂–∞–Ω—Ä: *{genre_info['name']}*\n\n"
        "–®–∞–≥ 2/10: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∂–∞–Ω—Ä\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AdvancedPlanStates.selecting_subgenre)
    await callback.answer()

async def process_subgenre_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∂–∞–Ω—Ä–∞"""
    
    subgenre = callback.data.replace("subgenre_", "")
    user_id = callback.from_user.id
    
    plan_drafts[user_id]["subgenre"] = subgenre
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    builder = InlineKeyboardBuilder()
    
    for audience_id, audience_name in AUDIENCES.items():
        builder.row(
            InlineKeyboardButton(
                text=audience_name,
                callback_data=f"audience_{audience_id}"
            )
        )
    
    await callback.message.edit_text(
        f"–ü–æ–¥–∂–∞–Ω—Ä: *{subgenre}*\n\n"
        "–®–∞–≥ 3/10: –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é\n\n"
        "–≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã–±–æ—Ä —Ç–µ–º.",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AdvancedPlanStates.selecting_audience)
    await callback.answer()

async def process_audience_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    
    audience_id = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id
    
    plan_drafts[user_id]["audience"] = audience_id
    
    await callback.message.edit_text(
        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: *{AUDIENCES[audience_id]}*\n\n"
        "–®–∞–≥ 4/10: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: _–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ —á—Ç–µ–Ω–∏—è_\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
        parse_mode="Markdown"
    )
    
    await state.set_state(AdvancedPlanStates.entering_name)
    await callback.answer()

async def process_plan_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞"""
    
    user_id = message.from_user.id
    plan_drafts[user_id]["name"] = message.text
    
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{message.text}*\n\n"
        "–®–∞–≥ 5/10: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞\n\n"
        "–û–ø–∏—à–∏—Ç–µ, –¥–ª—è –∫–∞–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –ø–æ–¥—Ö–æ–¥–∏—Ç —ç—Ç–æ—Ç –ø–ª–∞–Ω:",
        parse_mode="Markdown"
    )
    
    await state.set_state(AdvancedPlanStates.entering_description)

async def process_plan_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞"""
    
    user_id = message.from_user.id
    plan_drafts[user_id]["description"] = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    builder = InlineKeyboardBuilder()
    
    for struct_id, struct_info in STRUCTURES.items():
        builder.row(
            InlineKeyboardButton(
                text=struct_info["name"],
                callback_data=f"structure_{struct_id}"
            )
        )
    
    await message.answer(
        "–®–∞–≥ 6/10: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è\n\n"
        "–≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–∞–∫ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —Å—é–∂–µ—Ç:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AdvancedPlanStates.selecting_structure)

async def process_structure_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    
    structure_id = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    plan_drafts[user_id]["structure"] = structure_id
    structure_info = STRUCTURES[structure_id]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–∫—Ç–æ–≤
    builder = InlineKeyboardBuilder()
    
    for i, act in enumerate(structure_info["acts"], 1):
        builder.row(
            InlineKeyboardButton(
                text=f"üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å {act}",
                callback_data=f"customize_act_{i}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–∫—Ç–æ–≤",
            callback_data="skip_acts"
        )
    )
    
    await callback.message.edit_text(
        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: *{structure_info['name']}*\n"
        f"_{structure_info['description']}_\n\n"
        "–®–∞–≥ 7/10: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∂–¥—ã–π –∞–∫—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥:",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AdvancedPlanStates.customizing_acts)
    await callback.answer()

async def customize_act(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∞"""
    
    act_number = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    genre = plan_drafts[user_id]["genre"]
    structure = plan_drafts[user_id]["structure"]
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –∞–∫—Ç–∞
    template = build_act_instructions(genre, structure, act_number)
    
    await callback.message.edit_text(
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ê–∫—Ç–∞ {act_number}*\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n```\n{template}\n```\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫—Ç–∞ –∏–ª–∏ /skip —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ:",
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∞–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_act=act_number)
    await callback.answer()

async def process_atmosphere_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã"""
    
    user_id = callback.from_user.id
    genre = plan_drafts[user_id]["genre"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –¥–ª—è –∂–∞–Ω—Ä–∞
    builder = InlineKeyboardBuilder()
    
    atmospheres = GENRES[genre].get("atmospheres", [])
    selected_atmospheres = plan_drafts[user_id].get("atmospheres", [])
    
    for atmosphere in atmospheres:
        is_selected = atmosphere in selected_atmospheres
        builder.row(
            InlineKeyboardButton(
                text=f"{'‚úÖ' if is_selected else '‚¨ú'} {atmosphere}",
                callback_data=f"toggle_atmosphere_{atmosphere}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            callback_data="continue_from_atmosphere"
        )
    )
    
    await callback.message.edit_text(
        "–®–∞–≥ 8/10: –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)\n\n"
        "–≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω —Ä–∞—Å—Å–∫–∞–∑–∞:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AdvancedPlanStates.selecting_atmosphere)
    await callback.answer()

async def finalize_plan_creation(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞"""
    
    user_id = callback.from_user.id
    plan_data = plan_drafts[user_id]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    final_prompt = build_base_prompt(plan_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø–ª–∞–Ω–∞
    text = f"""üìã *–í–∞—à –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {plan_data['name']}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {plan_data['description']}
*–ñ–∞–Ω—Ä:* {GENRES[plan_data['genre']]['name']} - {plan_data['subgenre']}
*–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {AUDIENCES[plan_data['audience']]}
*–°—Ç—Ä—É–∫—Ç—É—Ä–∞:* {STRUCTURES[plan_data['structure']]['name']}
*–û–±—ä–µ–º:* {plan_data['word_count']} —Å–ª–æ–≤

*–ü—Ä–æ–º–ø—Ç –¥–ª—è AI:*
```
{final_prompt[:1000]}...
```

–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–ª–∞–Ω?"""
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_advanced_plan"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_advanced_plan")
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_advanced_plan")
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AdvancedPlanStates.reviewing_plan)
    await callback.answer()

# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def create_plan_from_draft(plan_data: Dict) -> Dict:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
    
    final_prompt = build_base_prompt(plan_data)
    
    return {
        "name": plan_data["name"],
        "description": plan_data["description"],
        "text_steps": [
            {
                "type": "extract_audio",
                "params": {"format": "mp3"}
            },
            {
                "type": "transcribe",
                "params": {
                    "language": "ru",
                    "model": "large"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º large –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                }
            },
            {
                "type": "process_with_claude",
                "params": {
                    "prompt": final_prompt,
                    "model": "claude-3-opus-20240229",  # Opus –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
                    "temperature": 0.8,  # –í—ã—à–µ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    "max_tokens": 4000
                }
            },
            {
                "type": "generate_speech",
                "params": {
                    "voice": plan_data.get("voice_settings", {}).get("voice", "alena"),
                    "emotion": plan_data.get("voice_settings", {}).get("emotion", "neutral"),
                    "speed": plan_data.get("voice_settings", {}).get("speed", 1.0)
                }
            }
        ],
        "video_steps": [],
        "default_prompt": final_prompt,
        "is_active": True,
        "modules_enabled": ["text"],
        "metadata": {
            "genre": plan_data["genre"],
            "subgenre": plan_data["subgenre"],
            "audience": plan_data["audience"],
            "structure": plan_data["structure"],
            "atmospheres": plan_data["atmospheres"],
            "word_count": plan_data["word_count"]
        }
    }

# ===== –®–ê–ë–õ–û–ù–´ –ì–û–¢–û–í–´–• –ü–õ–ê–ù–û–í =====

PRESET_PLANS = {
    "horror_night": {
        "name": "üåô –ù–æ—á–Ω—ã–µ —É–∂–∞—Å—ã",
        "description": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ö–æ—Ä—Ä–æ—Ä—ã —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º",
        "template": """–°–æ–∑–¥–∞–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ö–æ—Ä—Ä–æ—Ä –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 25-45 –ª–µ—Ç.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–±—ä–µ–º: 20000 —Å–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: 3 –∞–∫—Ç–∞ —Å –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: –∑–ª–æ–≤–µ—â–∞—è, —Ç—Ä–µ–≤–æ–∂–Ω–∞—è, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø–∞—Ä–∞–Ω–æ–π–∏
- –ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ –¥–ª—è –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è

–ê–ö–¢ 1 (25%): –û–±—ã—á–Ω–∞—è –∂–∏–∑–Ω—å –≥–µ—Ä–æ—è —Å —Ç—Ä–µ–≤–æ–∂–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
–ê–ö–¢ 2 (50%): –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, –ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç—Ä–æ–ª—è
–ê–ö–¢ 3 (25%): –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è —É–∂–∞—Å–∞ –∏ —à–æ–∫–∏—Ä—É—é—â–∏–π —Ñ–∏–Ω–∞–ª

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ [—à–æ—Ä–æ—Ö], [—Å–∫—Ä–∏–ø], —Å–æ–∑–¥–∞–≤–∞–π –ø–∞—É–∑—ã –º–Ω–æ–≥–æ—Ç–æ—á–∏—è–º–∏..."""
    },
    
    "detective_classic": {
        "name": "üîç –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤",
        "description": "–ó–∞–ø—É—Ç–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏",
        "template": """–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –≤ —Å—Ç–∏–ª–µ –ê–≥–∞—Ç—ã –ö—Ä–∏—Å—Ç–∏.

–°–¢–†–£–ö–¢–£–†–ê:
1. –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
2. –°–±–æ—Ä —É–ª–∏–∫ –∏ –æ–ø—Ä–æ—Å —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π
3. –õ–æ–∂–Ω—ã–µ —Å–ª–µ–¥—ã –∏ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è
4. –û–∑–∞—Ä–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞
5. –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–æ–±–ª–∞—á–µ–Ω–∏–µ

–û–±—ä–µ–º: 20000 —Å–ª–æ–≤
–°—Ç–∏–ª—å: –û—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –ª–∏—Ü–∞, –≤—Å–µ–∑–Ω–∞—é—â–∏–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫
–í–∫–ª—é—á–∏: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —É–ª–∏–∫, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö"""
    }
}

# ===== –ò–ù–¢–ï–†–§–ï–ô–° –í–´–ë–û–†–ê –®–ê–ë–õ–û–ù–û–í =====

async def show_plan_templates(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–ª–∞–Ω–æ–≤"""
    
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üÜï –°–æ–∑–¥–∞—Ç—å —Å –Ω—É–ª—è",
            callback_data="create_from_scratch"
        )
    )
    
    for template_id, template_info in PRESET_PLANS.items():
        builder.row(
            InlineKeyboardButton(
                text=template_info["name"],
                callback_data=f"use_template_{template_id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞",
            callback_data="import_plan"
        )
    )
    
    builder.row(
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="plans_menu")
    )
    
    await callback.message.edit_text(
        "üìö *–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è —Ä–∞—Å—Å–∫–∞–∑–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:\n\n"
        "‚Ä¢ *–° –Ω—É–ª—è* - –ø–æ—à–∞–≥–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä\n"
        "‚Ä¢ *–®–∞–±–ª–æ–Ω—ã* - –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã\n"
        "‚Ä¢ *–ò–º–ø–æ—Ä—Ç* - –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()